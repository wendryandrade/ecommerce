name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOTNET_VERSION: '8.0.x'
  SLN_FILE: 'Ecommerce.sln'
  DOCKER_IMAGE_NAME: ecommerce-api
  DOCKER_REGISTRY: ghcr.io

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Create .env file
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_KEY: ${{ secrets.JWT_KEY }}
          JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
          JWT_AUDIENCE: ${{ secrets.JWT_AUDIENCE }}
          STRIPE_SECRETKEY: ${{ secrets.STRIPE_SECRETKEY }}
          STRIPE_PUBLISHABLEKEY: ${{ secrets.STRIPE_PUBLISHABLEKEY }}
          API_URL: ${{ secrets.API_URL }}
          API_TOKEN: ${{ secrets.API_TOKEN }}
        run: |
          cat > .env << EOF
          DB_PASS=$DB_PASSWORD
          DB_HOST=ecommerce-db
          DB_NAME=EcommerceDB
          DB_USER=sa
          DB_PORT=1433
          JWT_KEY=$JWT_KEY
          JWT_ISSUER=$JWT_ISSUER
          JWT_AUDIENCE=$JWT_AUDIENCE
          STRIPE_SECRETKEY=$STRIPE_SECRETKEY
          STRIPE_PUBLISHABLEKEY=$STRIPE_PUBLISHABLEKEY
          API_URL=$API_URL
          API_TOKEN=$API_TOKEN
          DEFAULT_ORIGIN_ZIPCODE=01001000
          SERVICES=1,2,18
          USE_MOCK_DATA=false
          DEFAULT_PACKAGE_WIDTH=10
          DEFAULT_PACKAGE_HEIGHT=10
          DEFAULT_PACKAGE_LENGTH=10
          DEFAULT_PACKAGE_WEIGHT=1
          DEFAULT_INSURANCE_VALUE=0
          EOF

      - name: Start Docker services
        run: docker compose up --build -d

      - name: Install SonarScanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Verify SonarCloud Configuration
        run: |
          echo "Current directory structure:"
          ls -la
          echo ""
          echo "SonarCloud will use command line parameters for configuration"

      - name: Begin SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          HEAD_REF: ${{ github.head_ref }}
          BASE_REF: ${{ github.base_ref }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
            echo "Running PR analysis..."
                         dotnet sonarscanner begin \
               /k:"wendryandrade_ecommerce" \
               /n:"Ecommerce" \
               /o:"wendryandrade" \
               /d:sonar.host.url="https://sonarcloud.io" \
               /d:sonar.login="$SONAR_TOKEN" \
               /d:sonar.pullrequest.key="$PR_NUMBER" \
               /d:sonar.pullrequest.branch="$HEAD_REF" \
               /d:sonar.pullrequest.base="$BASE_REF" \
               /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" \
               /d:sonar.cs.vstest.reportsPaths="**/TestResults/**/*.trx" \
               /d:sonar.scm.disabled="false" \
               /d:sonar.coverage.exclusions="**/Program.cs,**/Program.Partials.cs,**/Startup.cs,**/Migrations/**,**/TestResults/**,**/bin/**,**/obj/**" \
               /d:sonar.coverage.aggregate="true" \
               /d:sonar.coverage.forceZeroCoverage="false" \
               /d:sonar.coverage.minimum="0" \
               /d:sonar.newCodePeriod="365"
          else
            echo "Running full main branch analysis..."
                         dotnet sonarscanner begin \
               /k:"wendryandrade_ecommerce" \
               /n:"Ecommerce" \
               /o:"wendryandrade" \
               /d:sonar.host.url="https://sonarcloud.io" \
               /d:sonar.login="$SONAR_TOKEN" \
               /d:sonar.branch.name="main" \
               /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" \
               /d:sonar.cs.vstest.reportsPaths="**/TestResults/**/*.trx" \
               /d:sonar.scm.disabled="false" \
               /d:sonar.coverage.exclusions="**/Program.cs,**/Program.Partials.cs,**/Startup.cs,**/Migrations/**,**/TestResults/**,**/bin/**,**/obj/**" \
               /d:sonar.coverage.aggregate="true" \
               /d:sonar.coverage.forceZeroCoverage="false" \
               /d:sonar.coverage.minimum="0" \
               /d:sonar.newCodePeriod="365"
          fi

      - name: Build API
        run: dotnet build ${{ env.SLN_FILE }} --configuration Release --no-incremental

      - name: Run Tests and Coverage
        run: |
          dotnet test ${{ env.SLN_FILE }} \
            --no-build \
            --configuration Release \
            --logger "trx;LogFileName=test_results.trx" \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            /p:CoverletOutput=TestResults/Coverage/ \
            /p:MergeWith=TestResults/Coverage/coverage.opencover.xml \
            /p:CoverletOutputDirectory=TestResults/Coverage/

      - name: Verify Coverage Files
        run: |
          echo "Checking for coverage files..."
          find . -name "coverage.opencover.xml" -type f
          ls -la **/TestResults/**/coverage.opencover.xml || echo "No coverage files found"
          echo "Coverage files content preview:"
          for file in $(find . -name "coverage.opencover.xml" -type f); do
            echo "=== $file ==="
            head -20 "$file" || echo "Could not read file"
            echo ""
          done

      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            **/TestResults/**/*.trx
            **/TestResults/**/coverage.opencover.xml

      - name: Cleanup Docker
        if: always()
        run: docker compose down -v