name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DOTNET_VERSION: '8.0.x'
  SLN_FILE: 'Ecommerce.sln'
  DOCKER_IMAGE_NAME: ecommerce-api
  DOCKER_REGISTRY: ghcr.io

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Create .env file
        run: |
          cat > .env << EOF
          DB_PASS=Your_password123!
          DB_HOST=ecommerce-db
          DB_NAME=EcommerceDB
          DB_USER=sa
          DB_PORT=1433
          JWT_KEY=${{ secrets.JWT_KEY }}
          JWT_ISSUER=${{ secrets.JWT_ISSUER }}
          JWT_AUDIENCE=${{ secrets.JWT_AUDIENCE }}
          STRIPE_SECRETKEY=${{ secrets.STRIPE_SECRETKEY }}
          STRIPE_PUBLISHABLEKEY=${{ secrets.STRIPE_PUBLISHABLEKEY }}
          API_URL=${{ secrets.API_URL }}
          API_TOKEN=${{ secrets.API_TOKEN }}
          DEFAULT_ORIGIN_ZIPCODE=01001000
          SERVICES=1,2,18
          USE_MOCK_DATA=false
          DEFAULT_PACKAGE_WIDTH=10
          DEFAULT_PACKAGE_HEIGHT=10
          DEFAULT_PACKAGE_LENGTH=10
          DEFAULT_PACKAGE_WEIGHT=1
          DEFAULT_INSURANCE_VALUE=0
          EOF

      - name: Start Docker services
        run: docker compose up --build -d

      - name: Install SonarScanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Setup SonarCloud project
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # Create SonarCloud project if it doesn't exist
          curl -X POST "https://sonarcloud.io/api/projects/create" \
            -H "Authorization: Bearer $SONAR_TOKEN" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "project=ecommerce&name=Ecommerce&organization=wendryandrade" \
            || echo "Project may already exist or creation failed"
          
          # Set default branch to main
          curl -X POST "https://sonarcloud.io/api/project_branches/rename" \
            -H "Authorization: Bearer $SONAR_TOKEN" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "project=ecommerce&name=main" \
            || echo "Default branch setup may have failed"

      - name: Begin SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # PR analysis
            dotnet sonarscanner begin \
              /k:"ecommerce" \
              /n:"Ecommerce" \
              /o:"wendryandrade" \
              /d:sonar.host.url="https://sonarcloud.io" \
              /d:sonar.login="$SONAR_TOKEN" \
              /d:sonar.pullrequest.key="${{ github.event.pull_request.number }}" \
              /d:sonar.pullrequest.branch="${{ github.head_ref }}" \
              /d:sonar.pullrequest.base="${{ github.base_ref }}" \
              /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" \
              /d:sonar.cs.vstest.reportsPaths="**/TestResults/**/*.trx" \
              /d:sonar.coverage.exclusions="**/Migrations/**,**/Resources/**/DTOs/**,**/Resources/**/Requests/**,**/Resources/**/Responses/**,**/Program*.cs" \
              /d:sonar.sourceEncoding="UTF-8" \
              /d:sonar.projectBaseDir="."
          else
            # Regular branch analysis
            dotnet sonarscanner begin \
              /k:"ecommerce" \
              /n:"Ecommerce" \
              /o:"wendryandrade" \
              /d:sonar.host.url="https://sonarcloud.io" \
              /d:sonar.login="$SONAR_TOKEN" \
              /d:sonar.branch.name="${{ github.ref_name }}" \
              /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" \
              /d:sonar.cs.vstest.reportsPaths="**/TestResults/**/*.trx" \
              /d:sonar.coverage.exclusions="**/Migrations/**,**/Resources/**/DTOs/**,**/Resources/**/Requests/**,**/Resources/**/Responses/**,**/Program*.cs" \
              /d:sonar.sourceEncoding="UTF-8" \
              /d:sonar.projectBaseDir="."
          fi

      - name: Build API
        run: dotnet build ${{ env.SLN_FILE }} --configuration Release --no-incremental

      - name: Run Tests and Coverage
        run: |
          dotnet test ${{ env.SLN_FILE }} \
            --no-build \
            --configuration Release \
            --logger "trx;LogFileName=test_results.trx" \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            /p:CoverletOutput=TestResults/Coverage/

      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # End SonarCloud analysis
          dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN" || echo "SonarCloud analysis ended with warnings"
          
          # If this is the main branch, ensure it's set as the default branch
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "Ensuring main branch is set as default in SonarCloud"
            curl -X POST "https://sonarcloud.io/api/project_branches/rename" \
              -H "Authorization: Bearer $SONAR_TOKEN" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -d "project=ecommerce&name=main" \
              || echo "Default branch setup completed"
          fi

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            **/TestResults/**/*.trx
            **/TestResults/**/coverage.opencover.xml

      - name: Cleanup Docker
        if: always()
        run: docker compose down -v
