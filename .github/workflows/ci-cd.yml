name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_DIR: 'Ecommerce.API'
  SLN_FILE: 'Ecommerce.sln'
  DOCKER_IMAGE_NAME: 'ecommerce-api'
  DOCKER_REGISTRY: ghcr.io

jobs:
  build-test-scan:
    runs-on: ubuntu-latest

    services:
      sonarqube-db:
        image: postgres:15
        env:
          POSTGRES_USER: sonar
          POSTGRES_PASSWORD: sonar
          POSTGRES_DB: sonar
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready" \
          --health-interval 10s \
          --health-timeout 5s \
          --health-retries 5 \
          --name sonarqube-db

      sonarqube:
        image: sonarqube:lts-community
        env:
          SONARQUBE_JDBC_URL: jdbc:postgresql://sonarqube-db:5432/sonar
          SONARQUBE_JDBC_USERNAME: sonar
          SONARQUBE_JDBC_PASSWORD: sonar
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
        ports:
          - 9000:9000
        depends_on:
          - sonarqube-db
        options: >-
          --health-cmd "curl --fail http://localhost:9000/api/server/version" \
          --health-interval 10s \
          --health-timeout 5s \
          --health-retries 5 \
          --name sonarqube

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Setup SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global dotnet-reportgenerator-globaltool
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Start SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin /k:"my-ecommerce-project" \
            /o:"wendryandrade-org" \
            /d:sonar.host.url="http://sonarqube:9000" \
            /d:sonar.login="$SONAR_TOKEN" \
            /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" \
            /d:sonar.exclusions="**/*.sln,**/*.csproj,**/bin/**,**/obj/**,**/Migrations/**" \
            /d:sonar.scm.disabled="true"

      - name: Restore dependencies
        run: dotnet restore ${{ env.SLN_FILE }}

      - name: Build projects
        run: dotnet build ${{ env.SLN_FILE }} --no-restore --configuration Release

      - name: Run Unit Tests and generate coverage
        run: >
          dotnet test ${{ env.SLN_FILE }} --no-build --configuration Release --verbosity normal
          --collect:"XPlat Code Coverage" --results-directory "TestResults"
          /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
          /p:CoverletOutput=./TestResults/coverage.opencover.xml

      - name: Start DB and RabbitMQ for Integration Tests (docker-compose)
        run: |
          docker compose pull ecommerce-db rabbitmq || true
          docker compose up -d --build ecommerce-db rabbitmq

      - name: Run Integration Tests (docker-compose)
        run: docker compose run --rm ecommerce-tests

      - name: End SonarQube Scan and Publish Results
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"

      - name: Log in to GitHub Packages
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ env.PROJECT_DIR }}
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Cleanup Docker resources
        if: always()
        run: docker compose down -v || true