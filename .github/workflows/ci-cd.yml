name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_DIR: 'Ecommerce.API'
  SLN_FILE: 'Ecommerce.sln'
  DOCKER_IMAGE_NAME: wendryandrade/ecommerce-api
  DOCKER_REGISTRY: ghcr.io

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Install SonarScanner and tools
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global dotnet-reportgenerator-globaltool
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
      
      # Inicia os serviços com Docker Compose, incluindo SonarQube e RabbitMQ
      - name: Start services with Docker Compose
        run: |
          docker compose up -d sonarqube-db sonarqube rabbitmq

      # Espera pelo SonarQube estar pronto para evitar "Connection refused"
      - name: Wait for SonarQube to be UP
        run: |
          echo "Waiting for SonarQube to be UP..."
          for i in {1..120}; do \
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:9000/api/system/status); \
            echo "SonarQube status code: $STATUS"; \
            if [ "$STATUS" = "200" ]; then echo "SonarQube is UP"; break; fi; \
            sleep 5; \
          done
          
      - name: SonarQube begin analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:"ecommerce" \
            /n:"Ecommerce" \
            /d:sonar.host.url="http://localhost:9000" \
            /d:sonar.login="${{ env.SONAR_TOKEN }}" \
            /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" \
            /d:sonar.cs.vstest.reportsPaths="**/TestResults/**/*.trx" \
            /d:sonar.coverage.exclusions="**/Migrations/**,**/Resources/**/DTOs/**,**/Resources/**/Requests/**,**/Resources/**/Responses/**,**/Program*.cs" \
            /d:sonar.sourceEncoding="UTF-8"
        
      - name: Restore dependencies
        run: dotnet restore ${{ env.SLN_FILE }}

      - name: Build projects
        run: dotnet build ${{ env.SLN_FILE }} --configuration Release --no-restore --no-incremental

      - name: Run Tests and generate coverage
        run: >
          dotnet test ${{ env.SLN_FILE }} --no-build --configuration Release
          --logger "trx;LogFileName=test_results.trx"
          /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
          /p:CoverletOutput=TestResults/Coverage/

      - name: Start Integration Tests services
        run: docker compose up -d ecommerce-db

      - name: Run Integration Tests
        run: docker compose run --rm tests

      - name: SonarQube end analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.login="${{ env.SONAR_TOKEN }}"

      - name: Log in to GitHub Packages
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ env.PROJECT_DIR }}
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Cleanup Docker resources
        if: always()
        run: docker compose down -v
